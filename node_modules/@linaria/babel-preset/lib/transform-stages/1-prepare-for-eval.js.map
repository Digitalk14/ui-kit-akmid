{"version":3,"file":"1-prepare-for-eval.js","names":["isModuleResolver","i","key","runPreevalStage","babel","filename","code","options","perFileBabelConfig","pluginOptions","loadLinariaOptions","parseConfig","buildOptions","babelOptions","fullParserOptions","loadBabelOptions","file","cachedParseSync","transformPlugins","require","resolve","moduleResolverPlugin","plugins","find","unshift","transformConfig","envName","sourceMaps","sourceFileName","inputSourceMap","root","ast","babelrc","configFile","result","transformFromAstSync","program","Error","getMatchedRule","rules","length","rule","test","RegExp","action","prepareCode","originalCode","only","fileCache","log","createCustomDebug","getFileIdx","set","preevalStageResult","withLinariaMetadata","metadata","evaluator","paths","dirname","default","name","processQueueItem","item","codeCache","undefined","results","Set","has","Map","extension","extname","extensions","includes","join","uncachedExports","get","forEach","token","delete","add","size","imports","Array","from","remainExports","preparedCode","prepareForEvalSync","resolveCache","resolvedFile","stack","processed","queue","importsOnly","importedFile","resolved","fileContent","readFileSync","push","err","prepareForEval","promises","promise","then","resolveCacheKey","cached","importsOnlySet","cachedOnly","split","Promise","all"],"sources":["../../src/transform-stages/1-prepare-for-eval.ts"],"sourcesContent":["import { readFileSync } from 'fs';\nimport { dirname, extname } from 'path';\n\nimport type { BabelFileResult, TransformOptions } from '@babel/core';\n\nimport { createCustomDebug } from '@linaria/logger';\nimport type { EvalRule, Evaluator } from '@linaria/utils';\nimport { buildOptions, getFileIdx, loadBabelOptions } from '@linaria/utils';\n\nimport type { Core } from '../babel';\nimport type Module from '../module';\nimport type { CodeCache, ITransformFileResult, Options } from '../types';\nimport withLinariaMetadata from '../utils/withLinariaMetadata';\n\nimport cachedParseSync from './helpers/cachedParseSync';\nimport loadLinariaOptions from './helpers/loadLinariaOptions';\n\nexport type FileInQueue = {\n  name: string;\n  code: string;\n  only: string[];\n} | null;\n\nconst isModuleResolver = (i: unknown): i is { options: unknown } =>\n  typeof i === 'object' &&\n  i !== null &&\n  (i as { key?: string }).key === 'module-resolver';\n\nfunction runPreevalStage(\n  babel: Core,\n  filename: string,\n  code: string,\n  options: Pick<Options, 'root' | 'pluginOptions' | 'inputSourceMap'>,\n  perFileBabelConfig?: TransformOptions\n): BabelFileResult {\n  const pluginOptions = loadLinariaOptions(options.pluginOptions);\n  const parseConfig = buildOptions(\n    pluginOptions?.babelOptions,\n    perFileBabelConfig\n  );\n\n  const fullParserOptions = loadBabelOptions(babel, filename, parseConfig);\n  const file = cachedParseSync(babel, code, fullParserOptions);\n\n  const transformPlugins: babel.PluginItem[] = [\n    [require.resolve('../plugins/preeval'), pluginOptions],\n  ];\n\n  const moduleResolverPlugin =\n    fullParserOptions.plugins?.find(isModuleResolver);\n  if (moduleResolverPlugin) {\n    transformPlugins.unshift(moduleResolverPlugin);\n  }\n\n  const transformConfig = buildOptions({\n    envName: 'linaria',\n    plugins: transformPlugins,\n    sourceMaps: true,\n    sourceFileName: filename,\n    inputSourceMap: options.inputSourceMap,\n    root: options.root,\n    ast: true,\n    babelrc: false,\n    configFile: false,\n  });\n\n  const result = babel.transformFromAstSync(file, code, {\n    ...transformConfig,\n    filename,\n  });\n\n  if (!result || !result.ast?.program) {\n    throw new Error('Babel transform failed');\n  }\n\n  return result;\n}\n\nfunction getMatchedRule(\n  rules: EvalRule[],\n  filename: string,\n  code: string\n): EvalRule {\n  for (let i = rules.length - 1; i >= 0; i--) {\n    const rule = rules[i];\n    if (!rule.test) {\n      return rule;\n    }\n\n    if (typeof rule.test === 'function' && rule.test(filename, code)) {\n      return rule;\n    }\n\n    if (rule.test instanceof RegExp && rule.test.test(filename)) {\n      return rule;\n    }\n  }\n\n  return { action: 'ignore' };\n}\n\nfunction prepareCode(\n  babel: Core,\n  filename: string,\n  originalCode: string,\n  only: string[],\n  options: Pick<Options, 'root' | 'pluginOptions' | 'inputSourceMap'>,\n  fileCache: Map<string | symbol, ITransformFileResult>\n): [\n  code: string,\n  imports: Module['imports'],\n  metadata?: babel.BabelFileMetadata\n] {\n  const log = createCustomDebug('transform', getFileIdx(filename));\n\n  const pluginOptions = loadLinariaOptions(options.pluginOptions);\n\n  const { action, babelOptions } = getMatchedRule(\n    pluginOptions.rules,\n    filename,\n    originalCode\n  );\n\n  if (action === 'ignore') {\n    log('stage-1:ignore', '');\n    fileCache.set('*', {\n      code: originalCode,\n    });\n\n    return [originalCode, null];\n  }\n\n  const preevalStageResult = runPreevalStage(\n    babel,\n    filename,\n    originalCode,\n    options,\n    babelOptions\n  );\n\n  if (\n    only.length === 1 &&\n    only[0] === '__linariaPreval' &&\n    !withLinariaMetadata(preevalStageResult.metadata)\n  ) {\n    log('stage-1:evaluator:end', 'no metadata');\n    return [preevalStageResult.code!, null, preevalStageResult.metadata];\n  }\n\n  log('stage-1:preeval', 'metadata %O', preevalStageResult.metadata);\n\n  // Action can be a function or a module name\n  const evaluator: Evaluator =\n    typeof action === 'function'\n      ? action\n      : require(require.resolve(action, {\n          paths: [dirname(filename)],\n        })).default;\n\n  log('stage-1:evaluator:start', 'using %s', evaluator.name);\n\n  const result = evaluator(\n    filename,\n    pluginOptions,\n    preevalStageResult.code!,\n    only,\n    babel\n  );\n\n  log('stage-1:evaluator:end', '');\n\n  return [...result, preevalStageResult.metadata];\n}\n\nfunction processQueueItem(\n  babel: Core,\n  item: {\n    name: string;\n    code: string;\n    only: string[];\n  } | null,\n  codeCache: CodeCache,\n  options: Pick<Options, 'root' | 'pluginOptions' | 'inputSourceMap'>\n):\n  | {\n      imports: Map<string, string[]> | null;\n      name: string;\n      results: ITransformFileResult[];\n    }\n  | undefined {\n  if (!item) {\n    return undefined;\n  }\n\n  const pluginOptions = loadLinariaOptions(options.pluginOptions);\n\n  const results = new Set<ITransformFileResult>();\n\n  const { name, only, code } = item;\n  if (!codeCache.has(name)) {\n    codeCache.set(name, new Map());\n  }\n\n  const log = createCustomDebug('transform', getFileIdx(name));\n\n  const extension = extname(name);\n  if (!pluginOptions.extensions.includes(extension)) {\n    log(\n      'init',\n      `${name} is ignored. If you want it to be processed, you should add '${extension}' to the \"extensions\" option.`\n    );\n    return undefined;\n  }\n\n  log('init', `${name} (${only.join(', ')})\\n${code}`);\n\n  const uncachedExports = new Set(only);\n  const fileCache = codeCache.get(name)!;\n  uncachedExports.forEach((token) => {\n    if (fileCache.has(token)) {\n      uncachedExports.delete(token);\n      results.add(fileCache.get(token)!);\n    }\n  });\n\n  if (uncachedExports.size === 0) {\n    // Already processed\n    return {\n      imports: null,\n      name,\n      results: Array.from(results),\n    };\n  }\n\n  const remainExports = Array.from(uncachedExports);\n\n  log('stage-1', `>> (${remainExports.join(', ')})`);\n\n  const [preparedCode, imports, metadata] = prepareCode(\n    babel,\n    name,\n    code,\n    remainExports,\n    options,\n    fileCache\n  );\n\n  if (code === preparedCode) {\n    log('stage-1', `<< (${remainExports.join(', ')})\\n === no changes ===`);\n  } else {\n    log('stage-1', `<< (${remainExports.join(', ')})\\n${preparedCode}`);\n  }\n\n  const result = {\n    metadata,\n    code: preparedCode,\n  };\n  results.add(result);\n\n  remainExports.forEach((token) => {\n    fileCache.set(token, result);\n  });\n\n  if (preparedCode === '') return undefined;\n\n  return {\n    imports,\n    name,\n    results: Array.from(results),\n  };\n}\n\nexport function prepareForEvalSync(\n  babel: Core,\n  resolveCache: Map<string, string>,\n  codeCache: CodeCache,\n  resolve: (what: string, importer: string, stack: string[]) => string,\n  resolvedFile: FileInQueue,\n  options: Pick<Options, 'root' | 'pluginOptions' | 'inputSourceMap'>,\n  stack: string[] = []\n): ITransformFileResult[] | undefined {\n  const processed = processQueueItem(babel, resolvedFile, codeCache, options);\n  if (!processed) return undefined;\n\n  const { imports, name, results } = processed;\n\n  const log = createCustomDebug('transform', getFileIdx(name));\n\n  const queue: FileInQueue[] = [];\n\n  imports?.forEach((importsOnly, importedFile) => {\n    try {\n      const resolved = resolve(importedFile, name, stack);\n      log('stage-1:sync-resolve', `✅ ${importedFile} -> ${resolved}`);\n      resolveCache.set(\n        `${name} -> ${importedFile}`,\n        `${resolved}\\0${importsOnly.join(',')}`\n      );\n      const fileContent = readFileSync(resolved, 'utf8');\n      queue.push({\n        name: resolved,\n        only: importsOnly,\n        code: fileContent,\n      });\n    } catch (err) {\n      log('stage-1:sync-resolve', `❌ cannot resolve ${importedFile}: %O`, err);\n    }\n  });\n\n  queue.forEach((item) => {\n    prepareForEvalSync(babel, resolveCache, codeCache, resolve, item, options, [\n      name,\n      ...stack,\n    ]);\n  });\n\n  return Array.from(results);\n}\n\n/**\n * Parses the specified file and recursively all its dependencies,\n * finds tags, applies eval-time replacements, removes dead code.\n */\nexport default async function prepareForEval(\n  babel: Core,\n  resolveCache: Map<string, string>,\n  codeCache: CodeCache,\n  resolve: (what: string, importer: string, stack: string[]) => Promise<string>,\n  file: Promise<FileInQueue>,\n  options: Pick<Options, 'root' | 'pluginOptions' | 'inputSourceMap'>,\n  stack: string[] = []\n): Promise<ITransformFileResult[] | undefined> {\n  const resolvedFile = await file;\n  const processed = processQueueItem(babel, resolvedFile, codeCache, options);\n  if (!processed) return undefined;\n\n  const { imports, name, results } = processed;\n\n  const log = createCustomDebug('transform', getFileIdx(name));\n\n  const promises: Promise<ITransformFileResult[] | undefined>[] = [];\n\n  imports?.forEach((importsOnly, importedFile) => {\n    const promise = resolve(importedFile, name, stack).then(\n      (resolved) => {\n        log('stage-1:async-resolve', `✅ ${importedFile} -> ${resolved}`);\n        const resolveCacheKey = `${name} -> ${importedFile}`;\n        const cached = resolveCache.get(resolveCacheKey);\n        const importsOnlySet = new Set(importsOnly);\n        if (cached) {\n          const [, cachedOnly] = cached.split('\\0');\n          cachedOnly?.split(',').forEach((token) => {\n            importsOnlySet.add(token);\n          });\n        }\n\n        resolveCache.set(\n          resolveCacheKey,\n          `${resolved}\\0${[...importsOnlySet].join(',')}`\n        );\n        const fileContent = readFileSync(resolved, 'utf8');\n        return {\n          name: resolved,\n          only: importsOnly,\n          code: fileContent,\n        };\n      },\n      (err: unknown) => {\n        log(\n          'stage-1:async-resolve',\n          `❌ cannot resolve ${importedFile}: %O`,\n          err\n        );\n        return null;\n      }\n    );\n\n    promises.push(\n      prepareForEval(\n        babel,\n        resolveCache,\n        codeCache,\n        resolve,\n        promise,\n        options,\n        [name, ...stack]\n      )\n    );\n  });\n\n  await Promise.all(promises);\n\n  return Array.from(results);\n}\n"],"mappings":"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"}