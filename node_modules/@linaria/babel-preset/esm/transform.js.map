{"version":3,"file":"transform.js","names":["babel","prepareForEval","prepareForEvalSync","evalStage","prepareForRuntime","extractStage","withLinariaMetadata","syncStages","originalCode","options","prepareStageResults","babelConfig","resolveCache","Map","codeCache","evalCache","eventEmitter","filename","every","r","metadata","code","sourceMap","inputSourceMap","type","evalStageResult","map","valueCache","dependencies","collectStageResult","extractStageResult","linaria","processors","replacements","transformSync","syncResolve","entryPoint","name","only","transform","asyncResolve","Promise","resolve"],"sources":["../src/transform.ts"],"sourcesContent":["/**\n * This file exposes transform function that:\n * - parse the passed code to AST\n * - transforms the AST using Linaria babel preset ('./babel/index.js) and additional config defined in Linaria config file or passed to bundler configuration.\n * - runs generated CSS files through default of user-defined preprocessor\n * - generates source maps for CSS files\n * - return transformed code (without Linaria template literals), generated CSS, source maps and babel metadata from transform step.\n */\n\nimport type { TransformOptions } from '@babel/core';\nimport * as babel from '@babel/core';\n\nimport type Module from './module';\nimport prepareForEval, {\n  prepareForEvalSync,\n} from './transform-stages/1-prepare-for-eval';\nimport evalStage from './transform-stages/2-eval';\nimport prepareForRuntime from './transform-stages/3-prepare-for-runtime';\nimport extractStage from './transform-stages/4-extract';\nimport type { Options, Result, CodeCache, ITransformFileResult } from './types';\nimport withLinariaMetadata from './utils/withLinariaMetadata';\n\nfunction syncStages(\n  originalCode: string,\n  options: Options,\n  prepareStageResults: ITransformFileResult[] | undefined,\n  babelConfig: TransformOptions = {},\n  resolveCache = new Map<string, string>(),\n  codeCache: CodeCache = new Map(),\n  evalCache = new Map<string, Module>(),\n  eventEmitter?: (ev: unknown) => void\n) {\n  const { filename } = options;\n\n  // File does not contain any tags. Return original code.\n  if (\n    !prepareStageResults ||\n    prepareStageResults.every((r) => !withLinariaMetadata(r.metadata))\n  ) {\n    return {\n      code: originalCode,\n      sourceMap: options.inputSourceMap,\n    };\n  }\n\n  // *** 2nd stage ***\n\n  eventEmitter?.({ type: 'transform:stage-2:start', filename });\n\n  const evalStageResult = evalStage(\n    resolveCache,\n    codeCache,\n    evalCache,\n    prepareStageResults.map((r) => r.code),\n    options\n  );\n\n  eventEmitter?.({ type: 'transform:stage-2:finish', filename });\n\n  if (evalStageResult === null) {\n    return {\n      code: originalCode,\n      sourceMap: options.inputSourceMap,\n    };\n  }\n\n  const [valueCache, dependencies] = evalStageResult;\n\n  // *** 3rd stage ***\n\n  eventEmitter?.({ type: 'transform:stage-3:start', filename });\n\n  const collectStageResult = prepareForRuntime(\n    babel,\n    originalCode,\n    valueCache,\n    options,\n    babelConfig\n  );\n\n  eventEmitter?.({ type: 'transform:stage-3:finish', filename });\n\n  if (!withLinariaMetadata(collectStageResult.metadata)) {\n    return {\n      code: collectStageResult.code!,\n      sourceMap: collectStageResult.map,\n    };\n  }\n\n  // *** 4th stage\n\n  eventEmitter?.({ type: 'transform:stage-4:start', filename });\n\n  const extractStageResult = extractStage(\n    collectStageResult.metadata.linaria.processors,\n    originalCode,\n    options\n  );\n\n  eventEmitter?.({ type: 'transform:stage-4:finish', filename });\n\n  return {\n    ...extractStageResult,\n    code: collectStageResult.code ?? '',\n    dependencies,\n    replacements: [\n      ...extractStageResult.replacements,\n      ...collectStageResult.metadata.linaria.replacements,\n    ],\n    sourceMap: collectStageResult.map,\n  };\n}\n\nexport function transformSync(\n  originalCode: string,\n  options: Options,\n  syncResolve: (what: string, importer: string, stack: string[]) => string,\n  babelConfig: TransformOptions = {},\n  resolveCache = new Map<string, string>(),\n  codeCache: CodeCache = new Map(),\n  evalCache = new Map<string, Module>(),\n  eventEmitter?: (ev: unknown) => void\n): Result {\n  const { filename } = options;\n\n  // *** 1st stage ***\n\n  eventEmitter?.({ type: 'transform:stage-1:start', filename });\n\n  const entryPoint = {\n    name: options.filename,\n    code: originalCode,\n    only: ['__linariaPreval'],\n  };\n\n  const prepareStageResults = prepareForEvalSync(\n    babel,\n    resolveCache,\n    codeCache,\n    syncResolve,\n    entryPoint,\n    options\n  );\n\n  eventEmitter?.({ type: 'transform:stage-1:finish', filename });\n\n  // *** The rest of the stages are synchronous ***\n\n  return syncStages(\n    originalCode,\n    options,\n    prepareStageResults,\n    babelConfig,\n    resolveCache,\n    codeCache,\n    evalCache,\n    eventEmitter\n  );\n}\n\nexport default async function transform(\n  originalCode: string,\n  options: Options,\n  asyncResolve: (\n    what: string,\n    importer: string,\n    stack: string[]\n  ) => Promise<string>,\n  babelConfig: TransformOptions = {},\n  resolveCache = new Map<string, string>(),\n  codeCache: CodeCache = new Map(),\n  evalCache = new Map<string, Module>(),\n  eventEmitter?: (ev: unknown) => void\n): Promise<Result> {\n  const { filename } = options;\n\n  // *** 1st stage ***\n\n  eventEmitter?.({ type: 'transform:stage-1:start', filename });\n\n  const entryPoint = Promise.resolve({\n    name: filename,\n    code: originalCode,\n    only: ['__linariaPreval'],\n  });\n\n  const prepareStageResults = await prepareForEval(\n    babel,\n    resolveCache,\n    codeCache,\n    asyncResolve,\n    entryPoint,\n    options\n  );\n\n  eventEmitter?.({ type: 'transform:stage-1:finish', filename });\n\n  // *** The rest of the stages are synchronous ***\n\n  return syncStages(\n    originalCode,\n    options,\n    prepareStageResults,\n    babelConfig,\n    resolveCache,\n    codeCache,\n    evalCache,\n    eventEmitter\n  );\n}\n"],"mappings":"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"}