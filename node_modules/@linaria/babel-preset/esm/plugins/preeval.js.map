{"version":3,"file":"preeval.js","names":["createCustomDebug","getFileIdx","isUnnecessaryReactCall","JSXElementsRemover","removeWithRelated","processTemplateExpression","isGlobal","id","scope","name","node","hasBinding","hasGlobal","forbiddenGlobals","Set","isBrowserGlobal","has","preeval","babel","options","types","t","pre","file","log","opts","filename","processors","path","traverse","Identifier","p","processor","doEvaltimeReplacement","push","CallExpression","enter","JSXElement","JSXFragment","parentPath","isUnaryExpression","operator","isTSTypeQuery","visitor","post","length","metadata","linaria","replacements","rules","dependencies","expressions","flatMap","map","dependency","ex","linariaPreval","getData","linariaExport","expressionStatement","assignmentExpression","memberExpression","identifier","objectExpression","objectProperty","pushContainer"],"sources":["../../src/plugins/preeval.ts"],"sourcesContent":["/**\n * This file is a babel preset used to transform files inside evaluators.\n * It works the same as main `babel/extract` preset, but do not evaluate lazy dependencies.\n */\nimport type { BabelFile, NodePath, PluginObj } from '@babel/core';\nimport type { Identifier } from '@babel/types';\n\nimport { createCustomDebug } from '@linaria/logger';\nimport type { StrictOptions } from '@linaria/utils';\nimport {\n  getFileIdx,\n  isUnnecessaryReactCall,\n  JSXElementsRemover,\n  removeWithRelated,\n} from '@linaria/utils';\n\nimport type { Core } from '../babel';\nimport type { IPluginState } from '../types';\nimport processTemplateExpression from '../utils/processTemplateExpression';\n\nexport type PreevalOptions = Pick<\n  StrictOptions,\n  'classNameSlug' | 'displayName' | 'evaluate'\n>;\n\nconst isGlobal = (id: NodePath<Identifier>): boolean => {\n  const { scope } = id;\n  const { name } = id.node;\n  return !scope.hasBinding(name) && scope.hasGlobal(name);\n};\n\nconst forbiddenGlobals = new Set([\n  'XMLHttpRequest',\n  'clearImmediate',\n  'clearInterval',\n  'clearTimeout',\n  'document',\n  'fetch',\n  'localStorage',\n  'location',\n  'navigator',\n  'sessionStorage',\n  'setImmediate',\n  'setInterval',\n  'setTimeout',\n  'window',\n]);\n\nconst isBrowserGlobal = (id: NodePath<Identifier>) => {\n  return forbiddenGlobals.has(id.node.name) && isGlobal(id);\n};\n\nexport default function preeval(\n  babel: Core,\n  options: PreevalOptions\n): PluginObj<IPluginState> {\n  const { types: t } = babel;\n  return {\n    name: '@linaria/babel/preeval',\n    pre(file: BabelFile) {\n      const log = createCustomDebug('preeval', getFileIdx(file.opts.filename!));\n\n      log('start', 'Looking for template literalsâ€¦');\n\n      this.processors = [];\n\n      file.path.traverse({\n        Identifier: (p) => {\n          processTemplateExpression(p, file.opts, options, (processor) => {\n            processor.doEvaltimeReplacement();\n            this.processors.push(processor);\n          });\n        },\n      });\n\n      log('start', 'Strip all JSX and browser related stuff');\n      file.path.traverse({\n        // JSX can be replaced with a dummy value,\n        // but we have to do it after we processed template tags.\n        CallExpression: {\n          enter(p) {\n            if (isUnnecessaryReactCall(p)) {\n              JSXElementsRemover(p);\n            }\n          },\n        },\n        JSXElement: {\n          enter: JSXElementsRemover,\n        },\n        JSXFragment: {\n          enter: JSXElementsRemover,\n        },\n        Identifier(p) {\n          if (isBrowserGlobal(p)) {\n            if (\n              p.parentPath.isUnaryExpression({ operator: 'typeof' }) ||\n              p.parentPath.isTSTypeQuery()\n            ) {\n              // Ignore `typeof window` expressions\n              return;\n            }\n\n            removeWithRelated([p]);\n          }\n        },\n      });\n    },\n    visitor: {},\n    post(file: BabelFile) {\n      const log = createCustomDebug('preeval', getFileIdx(file.opts.filename!));\n\n      if (this.processors.length === 0) {\n        log('end', \"We didn't find any Linaria template literals\");\n\n        // We didn't find any Linaria template literals.\n        return;\n      }\n\n      this.file.metadata.linaria = {\n        processors: this.processors,\n        replacements: [],\n        rules: {},\n        dependencies: [],\n      };\n\n      const expressions: Identifier[] = this.processors.flatMap((processor) =>\n        processor.dependencies.map((dependency) => dependency.ex)\n      );\n\n      const linariaPreval = file.path.scope.getData('__linariaPreval');\n      if (!linariaPreval) {\n        const linariaExport = t.expressionStatement(\n          t.assignmentExpression(\n            '=',\n            t.memberExpression(\n              t.identifier('exports'),\n              t.identifier('__linariaPreval')\n            ),\n            t.objectExpression(\n              expressions.map((ex) => t.objectProperty(ex, ex, false, true))\n            )\n          )\n        );\n\n        file.path.pushContainer('body', linariaExport);\n      }\n\n      log('end', '__linariaPreval has been added');\n    },\n  };\n}\n"],"mappings":"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"}