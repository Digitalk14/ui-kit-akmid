{"version":3,"file":"index.js","names":["transformSync","buildOptions","loadBabelOptions","hasShakerMetadata","default","shakerPlugin","configCache","Map","getShakerConfig","only","sortedOnly","sort","key","join","has","get","config","ast","caller","name","targets","node","esmodules","plugins","require","resolve","onlyExports","set","shaker","filename","options","text","babel","transformOptions","babelOptions","transformed","metadata","Error","code","__linariaShaker","imports"],"sources":["../src/index.ts"],"sourcesContent":["import type { TransformOptions } from '@babel/core';\nimport { transformSync } from '@babel/core';\n\nimport { buildOptions, loadBabelOptions } from '@linaria/utils';\nimport type { Evaluator } from '@linaria/utils';\n\nimport { hasShakerMetadata } from './plugins/shaker-plugin';\n\nexport { default as shakerPlugin } from './plugins/shaker-plugin';\n\nconst configCache = new Map<string, TransformOptions>();\nconst getShakerConfig = (only: string[] | null): TransformOptions => {\n  const sortedOnly = [...(only ?? [])];\n  sortedOnly.sort();\n  const key = sortedOnly.join('\\0');\n  if (configCache.has(key)) {\n    return configCache.get(key)!;\n  }\n\n  const config = {\n    ast: true,\n    caller: {\n      name: 'linaria',\n    },\n    targets: {\n      node: 'current',\n      esmodules: false,\n    },\n    plugins: [\n      [\n        require.resolve('./plugins/shaker-plugin'),\n        {\n          onlyExports: sortedOnly,\n        },\n      ],\n      require.resolve('@babel/plugin-transform-modules-commonjs'),\n    ],\n  };\n\n  configCache.set(key, config);\n  return config;\n};\n\nconst shaker: Evaluator = (filename, options, text, only, babel) => {\n  const transformOptions = loadBabelOptions(\n    babel,\n    filename,\n    buildOptions(options?.babelOptions, getShakerConfig(only))\n  );\n\n  const transformed = transformSync(text, {\n    ...transformOptions,\n    filename,\n  });\n\n  if (!transformed || !hasShakerMetadata(transformed.metadata)) {\n    throw new Error(`${filename} has no shaker metadata`);\n  }\n\n  return [transformed.code ?? '', transformed.metadata.__linariaShaker.imports];\n};\n\nexport default shaker;\n"],"mappings":"AACA,SAASA,aAAT,QAA8B,aAA9B;AAEA,SAASC,YAAT,EAAuBC,gBAAvB,QAA+C,gBAA/C;AAGA,SAASC,iBAAT,QAAkC,yBAAlC;AAEA,SAASC,OAAO,IAAIC,YAApB,QAAwC,yBAAxC;AAEA,MAAMC,WAAW,GAAG,IAAIC,GAAJ,EAApB;;AACA,MAAMC,eAAe,GAAIC,IAAD,IAA6C;EACnE,MAAMC,UAAU,GAAG,CAAC,IAAID,IAAI,IAAI,EAAZ,CAAD,CAAnB;EACAC,UAAU,CAACC,IAAX;EACA,MAAMC,GAAG,GAAGF,UAAU,CAACG,IAAX,CAAgB,IAAhB,CAAZ;;EACA,IAAIP,WAAW,CAACQ,GAAZ,CAAgBF,GAAhB,CAAJ,EAA0B;IACxB,OAAON,WAAW,CAACS,GAAZ,CAAgBH,GAAhB,CAAP;EACD;;EAED,MAAMI,MAAM,GAAG;IACbC,GAAG,EAAE,IADQ;IAEbC,MAAM,EAAE;MACNC,IAAI,EAAE;IADA,CAFK;IAKbC,OAAO,EAAE;MACPC,IAAI,EAAE,SADC;MAEPC,SAAS,EAAE;IAFJ,CALI;IASbC,OAAO,EAAE,CACP,CACEC,OAAO,CAACC,OAAR,CAAgB,yBAAhB,CADF,EAEE;MACEC,WAAW,EAAEhB;IADf,CAFF,CADO,EAOPc,OAAO,CAACC,OAAR,CAAgB,0CAAhB,CAPO;EATI,CAAf;EAoBAnB,WAAW,CAACqB,GAAZ,CAAgBf,GAAhB,EAAqBI,MAArB;EACA,OAAOA,MAAP;AACD,CA9BD;;AAgCA,MAAMY,MAAiB,GAAG,CAACC,QAAD,EAAWC,OAAX,EAAoBC,IAApB,EAA0BtB,IAA1B,EAAgCuB,KAAhC,KAA0C;EAClE,MAAMC,gBAAgB,GAAG/B,gBAAgB,CACvC8B,KADuC,EAEvCH,QAFuC,EAGvC5B,YAAY,CAAC6B,OAAO,EAAEI,YAAV,EAAwB1B,eAAe,CAACC,IAAD,CAAvC,CAH2B,CAAzC;EAMA,MAAM0B,WAAW,GAAGnC,aAAa,CAAC+B,IAAD,EAAO,EACtC,GAAGE,gBADmC;IAEtCJ;EAFsC,CAAP,CAAjC;;EAKA,IAAI,CAACM,WAAD,IAAgB,CAAChC,iBAAiB,CAACgC,WAAW,CAACC,QAAb,CAAtC,EAA8D;IAC5D,MAAM,IAAIC,KAAJ,CAAW,GAAER,QAAS,yBAAtB,CAAN;EACD;;EAED,OAAO,CAACM,WAAW,CAACG,IAAZ,IAAoB,EAArB,EAAyBH,WAAW,CAACC,QAAZ,CAAqBG,eAArB,CAAqCC,OAA9D,CAAP;AACD,CAjBD;;AAmBA,eAAeZ,MAAf"}